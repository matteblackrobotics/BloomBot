// RangeControl6.2

// slimmed down version to save ram

// Methods:
// standBy state has the lamp set and is waiting for stablized input to then track range for setting lamp
// setLamp state is when the range is mapped to shape and brightness
// targets are generated by range and then smoothed by functions

// Notes:
// Power issue with servos draining power
// use 5v in all the way, no voltage regulators I guess

// seems to be issues when 5v from computer and powersupply interact, bump supply to 12v
// make sure 5v can be supplied along such a long line
// New board with new circutry 
// New logic - 22.5.5

// Tasks:
//

// User Input:
// Active Range: Sonar.h
// Maxiumum degree: ServoMotors.h
// Servo degesss at different triggers: ServoMotors.h
// Timing of triggers: Logic.h
// Colors at different triggers: LED.h
// Serial.print(F) outputs

#include "Overlord.h"

void setup() 
{
  setupUtilities();
  setupLEDOverlord(); // how does this get referenced
  setupNumber = 2;
  allLED1s(50,0,0); delay(500);
  LED0.setPixelColor(setupNumber, 0, 10, 10); LED0.show(); delay(100);
  LED1.clear(); LED1.show();
  setupServos(); 

  setupSonar();
  setAutoRangeTriggers(rangeMax);
  // setStaticRangeTriggers(rangeMax);

  // rangeSectionsLED0(3);
  //readSonar();
  //mapRangeLED1();
  //state = 1;
  //writeServo(1, 20);
  //pwmPCA9685.writeMicroseconds(1, 1000); // this fucks with the sensor value
  // pulse();
  //breathe();
  // bloomAll();
  state = 1;
}


void loop() 
{
  state = checkState();

  switch(state){
    case 1:
      sleep();
    break;

    case 2:
      pulse();
    break;

  }

  Serial.println(
  " state. = "+String(state)+
  " range. = "+String(range));
} 
  

